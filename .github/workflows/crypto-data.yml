name: Update Crypto Data

on:
  schedule:
    # 코인 시세: 10분마다 업데이트
    - cron: '0,30 * * * *'
  workflow_dispatch: # 수동 실행 가능

# 권한 추가
permissions:
  contents: write

jobs:
  update-crypto-data:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Initialize package.json and set ESM
      run: |
        npm init -y
        npm pkg set type=module
        
    - name: Fetch crypto data
      env:
        # GitHub Secrets를 환경변수로 주입
        OPENEXCHANGE_APP_ID: ${{ secrets.OPENEXCHANGE_APP_ID }}
        CURRENCY_API_KEY: ${{ secrets.CURRENCY_API_KEY }}
        FREECURRENCY_API_KEY: ${{ secrets.FREECURRENCY_API_KEY }}
      run: |
        cat > fetch-crypto.js << 'EOF'
        import fs from 'fs';
        
        async function fetchCryptoData() {
          try {
            console.log('Fetching crypto data...');
            
            // CoinGecko API 호출
            console.log('Fetching global prices...');
            const globalResponse = await fetch(
              'https://api.coingecko.com/api/v3/simple/price?ids=bitcoin,ethereum,ripple,cardano,solana,tether,shiba-inu,mantle&vs_currencies=usd&include_24hr_change=true&include_market_cap=true'
            );
            
            if (!globalResponse.ok) {
              throw new Error(`CoinGecko API failed: ${globalResponse.status}`);
            }
            const globalData = await globalResponse.json();
            console.log('Global data received');
            
            // Upbit API 호출
            console.log('Fetching Upbit prices...');
            const upbitResponse = await fetch(
             'https://api.upbit.com/v1/ticker?markets=KRW-BTC,KRW-ETH,KRW-XRP,KRW-ADA,KRW-SOL,KRW-USDT,KRW-SHIB,KRW-MNT'
            );
            
            if (!upbitResponse.ok) {
              throw new Error(`Upbit API failed: ${upbitResponse.status}`);
            }
            const upbitData = await upbitResponse.json();
            console.log('Upbit data received');
            
            // 환율 API 호출
            const exchangeRateInfo = await getExchangeRateWithCache();
            console.log(`Exchange rate: 1 USD = ${exchangeRateInfo.rate} KRW (Source: ${exchangeRateInfo.source})`);
            
            // 데이터 처리
            const coinMapping = {
            'bitcoin': { upbit: 'KRW-BTC', name: 'Bitcoin', symbol: 'BTC' },
            'ethereum': { upbit: 'KRW-ETH', name: 'Ethereum', symbol: 'ETH' },
            'ripple': { upbit: 'KRW-XRP', name: 'XRP', symbol: 'XRP' },
            'cardano': { upbit: 'KRW-ADA', name: 'Cardano', symbol: 'ADA' },
            'solana': { upbit: 'KRW-SOL', name: 'Solana', symbol: 'SOL' },
            'tether': { upbit: 'KRW-USDT', name: 'Tether', symbol: 'USDT' },
            'shiba-inu': { upbit: 'KRW-SHIB', name: 'Shiba Inu', symbol: 'SHIB' },
            'mantle': { upbit: 'KRW-MNT', name: 'Mantle', symbol: 'MNT' }
            };
            
            const coins = Object.entries(coinMapping).map(([coinId, info]) => {
              const globalPrice = globalData[coinId];
              const upbitPrice = upbitData.find(item => item.market === info.upbit);
              
              if (!globalPrice || !upbitPrice) {
                console.warn(`Missing data for ${coinId}`);
                return null;
              }
              
              const globalPriceUSD = globalPrice.usd;
              const globalPriceKRW = globalPriceUSD * exchangeRateInfo.rate;
              const upbitPriceKRW = upbitPrice.trade_price;
              const kimchiPremium = ((upbitPriceKRW - globalPriceKRW) / globalPriceKRW) * 100;
              
              console.log(`${info.name}: Global=${globalPriceUSD.toFixed(6)}USD (${globalPriceKRW.toFixed(0)}KRW), Upbit=${upbitPriceKRW.toFixed(0)}KRW, Premium=${kimchiPremium.toFixed(2)}%`);
              
              return {
                coin: `${info.name} (${info.symbol})`,
                global_price_usd: globalPriceUSD,
                global_price_krw: globalPriceKRW,
                upbit_price: upbitPriceKRW,
                kimchi_premium: kimchiPremium,
                change_24h: globalPrice.usd_24h_change,
                market_cap: globalPrice.usd_market_cap,   // ✅ 시가총액(USD) 추가
                raw: {
                  global: globalPrice,
                  upbit: upbitPrice,
                  exchange_rate: exchangeRateInfo.rate
                }
              };
            }).filter(Boolean);
            
            // JSON 파일로 저장
            const result = {
              updated_at: new Date().toISOString(),
              exchange_rate: {
                usd_to_krw: exchangeRateInfo.rate,
                source: exchangeRateInfo.source,
                last_updated: exchangeRateInfo.timestamp
              },
              coins: coins
            };
            
            if (!fs.existsSync('data')) {
              fs.mkdirSync('data');
            }
            
            fs.writeFileSync('data/crypto.json', JSON.stringify(result, null, 2));
            console.log(`Crypto data updated successfully! ${coins.length} coins processed.`);
            
          } catch (error) {
            console.error('Error fetching crypto data:', error);
            process.exit(1);
          }
        }
        
        // 환율 API 함수 (Secrets 사용)
        async function getExchangeRateWithCache() {
          const cacheFile = 'data/exchange_rate_cache.json';
          const cacheTime = 10 * 60 * 1000; // 10분
          
          try {
            // 캐시 확인
            if (fs.existsSync(cacheFile)) {
              const cache = JSON.parse(fs.readFileSync(cacheFile, 'utf8'));
              const cacheAge = Date.now() - new Date(cache.timestamp).getTime();
              
              if (cacheAge < cacheTime) {
                console.log(`Using cached exchange rate (${Math.floor(cacheAge / 60000)} minutes old): ${cache.rate} KRW`);
                return {
                  rate: cache.rate,
                  source: cache.source,
                  timestamp: cache.timestamp
                };
              }
            }
            
            // 환경변수에서 API 키 읽기
            const openExchangeAppId = process.env.OPENEXCHANGE_APP_ID;
            const currencyApiKey = process.env.CURRENCY_API_KEY;
            const freeCurrencyApiKey = process.env.FREECURRENCY_API_KEY;
            
            // API 배열 (우선순위 순)
            const apis = [];
            
            // 1순위: OpenExchangeRates (가장 신뢰도 높음)
            if (openExchangeAppId) {
              apis.push({
                name: 'OpenExchangeRates',
                url: `https://openexchangerates.org/api/latest.json?app_id=${openExchangeAppId}&symbols=KRW`,
                parser: (data) => data.rates.KRW
              });
            }
            
            // 2순위: 기타 유료 API들
            if (currencyApiKey) {
              apis.push({
                name: 'Currencyapi.com',
                url: `https://api.currencyapi.com/v3/latest?apikey=${currencyApiKey}&currencies=KRW&base_currency=USD`,
                parser: (data) => data.data.KRW.value
              });
            }
            
            if (freeCurrencyApiKey) {
              apis.push({
                name: 'Freecurrencyapi.com',
                url: `https://api.freecurrencyapi.com/v1/latest?apikey=${freeCurrencyApiKey}&currencies=KRW&base_currency=USD`,
                parser: (data) => data.data.KRW
              });
            }
            
            // 무료 API들 (항상 추가)
            apis.push(
              {
                name: 'Exchangerate.host',
                url: 'https://api.exchangerate.host/latest?base=USD&symbols=KRW',
                parser: (data) => data.rates.KRW
              },
              {
                name: 'Fawazahmed0 (GitHub)',
                url: 'https://cdn.jsdelivr.net/npm/@fawazahmed0/currency-api@latest/v1/currencies/usd.json',
                parser: (data) => data.usd.krw
              },
              {
                name: 'ExchangeRate-API.com',
                url: 'https://api.exchangerate-api.com/v4/latest/USD',
                parser: (data) => data.rates.KRW
              }
            );
            
            // 각 API 시도
            for (const api of apis) {
              try {
                console.log(`Trying ${api.name}...`);
                const response = await fetch(api.url);
                
                if (!response.ok) {
                  console.warn(`${api.name} failed: ${response.status}`);
                  continue;
                }
                
                const data = await response.json();
                const rate = api.parser(data);
                
                if (!rate || rate <= 0) {
                  console.warn(`${api.name} returned invalid rate: ${rate}`);
                  continue;
                }
                
                // 캐시 저장
                const cacheData = {
                  rate: rate,
                  source: api.name,
                  timestamp: new Date().toISOString()
                };
                
                fs.writeFileSync(cacheFile, JSON.stringify(cacheData, null, 2));
                console.log(`✅ ${api.name} success! Rate: ${rate} KRW`);
                
                return cacheData;
                
              } catch (error) {
                console.warn(`${api.name} error:`, error.message);
                continue;
              }
            }
            
            throw new Error('All exchange rate APIs failed');
            
          } catch (error) {
            console.warn('Failed to fetch exchange rate:', error.message);
            
            // 캐시 폴백
            if (fs.existsSync(cacheFile)) {
              const cache = JSON.parse(fs.readFileSync(cacheFile, 'utf8'));
              console.log(`Using fallback cached rate: ${cache.rate} KRW (${cache.source})`);
              return {
                rate: cache.rate,
                source: `${cache.source} (cached)`,
                timestamp: cache.timestamp
              };
            }
            
            // 기본값
            console.log('Using default exchange rate: 1350 KRW');
            return {
              rate: 1350,
              source: 'Default fallback',
              timestamp: new Date().toISOString()
            };
          }
        }
        
        fetchCryptoData();
        EOF
        
        node fetch-crypto.js
        
    - name: Commit and push if changed
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add data/crypto.json data/exchange_rate_cache.json
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Update crypto data - $(date)"
          git push
        fi