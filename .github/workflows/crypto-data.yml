name: Update Crypto Data

on:
  schedule:
    # 매 5분마다 실행
    - cron: '*/5 * * * *'
  workflow_dispatch: # 수동 실행 가능

# 권한 추가
permissions:
  contents: write # ✅ PUSH 권한 부여!
  
jobs:
  update-crypto-data:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Initialize package.json and set ESM
      run: |
        npm init -y
        npm pkg set type=module
        
    - name: Fetch crypto data
      run: |
        cat > fetch-crypto.js << 'EOF'
        import fs from 'fs';
        
        async function fetchCryptoData() {
          try {
            console.log('Fetching crypto data...');
            
            // CoinGecko API 호출
            console.log('Fetching global prices...');
            const globalResponse = await fetch(
              'https://api.coingecko.com/api/v3/simple/price?ids=bitcoin,ethereum,ripple,cardano,solana&vs_currencies=usd&include_24hr_change=true'
            );
            
            if (!globalResponse.ok) {
              throw new Error(`CoinGecko API failed: ${globalResponse.status}`);
            }
            const globalData = await globalResponse.json();
            console.log('Global data received');
            
            // Upbit API 호출
            console.log('Fetching Upbit prices...');
            const upbitResponse = await fetch(
              'https://api.upbit.com/v1/ticker?markets=KRW-BTC,KRW-ETH,KRW-XRP,KRW-ADA,KRW-SOL'
            );
            
            if (!upbitResponse.ok) {
              throw new Error(`Upbit API failed: ${upbitResponse.status}`);
            }
            const upbitData = await upbitResponse.json();
            console.log('Upbit data received');
            
            // 환율 API 호출
            console.log('Fetching exchange rate...');
            const exchangeResponse = await fetch(
              'https://api.exchangerate-api.com/v4/latest/USD'
            );
            
            if (!exchangeResponse.ok) {
              throw new Error(`Exchange rate API failed: ${exchangeResponse.status}`);
            }
            const exchangeData = await exchangeResponse.json();
            const exchangeRate = exchangeData.rates.KRW;
            console.log(`Exchange rate: 1 USD = ${exchangeRate} KRW`);
            
            // 데이터 처리
            const coinMapping = {
              'bitcoin': { upbit: 'KRW-BTC', name: 'Bitcoin', symbol: 'BTC' },
              'ethereum': { upbit: 'KRW-ETH', name: 'Ethereum', symbol: 'ETH' },
              'ripple': { upbit: 'KRW-XRP', name: 'XRP', symbol: 'XRP' },
              'cardano': { upbit: 'KRW-ADA', name: 'Cardano', symbol: 'ADA' },
              'solana': { upbit: 'KRW-SOL', name: 'Solana', symbol: 'SOL' }
            };
            
            const coins = Object.entries(coinMapping).map(([coinId, info]) => {
              const globalPrice = globalData[coinId];
              const upbitPrice = upbitData.find(item => item.market === info.upbit);
              
              if (!globalPrice || !upbitPrice) {
                console.warn(`Missing data for ${coinId}`);
                return null;
              }
              
              const globalPriceKRW = globalPrice.usd * exchangeRate;
              const upbitPriceKRW = upbitPrice.trade_price;
              const kimchiPremium = ((upbitPriceKRW - globalPriceKRW) / globalPriceKRW) * 100;
              
              console.log(`${info.name}: Global=${globalPriceKRW.toFixed(0)}KRW, Upbit=${upbitPriceKRW.toFixed(0)}KRW, Premium=${kimchiPremium.toFixed(2)}%`);
              
              return {
                coin: `${info.name} (${info.symbol})`,
                global_price: globalPriceKRW,
                upbit_price: upbitPriceKRW,
                kimchi_premium: kimchiPremium,
                change_24h: globalPrice.usd_24h_change,
                raw: {
                  global: globalPrice,
                  upbit: upbitPrice,
                  exchange_rate: exchangeRate
                }
              };
            }).filter(Boolean);
            
            // JSON 파일로 저장
            const result = {
              updated_at: new Date().toISOString(),
              coins: coins
            };
            
            // data 폴더 생성
            if (!fs.existsSync('data')) {
              fs.mkdirSync('data');
            }
            
            fs.writeFileSync('data/crypto.json', JSON.stringify(result, null, 2));
            console.log(`Crypto data updated successfully! ${coins.length} coins processed.`);
            
          } catch (error) {
            console.error('Error fetching crypto data:', error);
            process.exit(1);
          }
        }
        
        fetchCryptoData();
        EOF
        
        node fetch-crypto.js
        
    - name: Commit and push if changed
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add data/crypto.json
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Update crypto data - $(date)"
          git push
        fi