name: Update Crypto Data

on:
  schedule:
    # 코인 시세: 10분마다 업데이트
    - cron: '*/10 * * * *'
  workflow_dispatch: # 수동 실행 가능

# 권한 추가
permissions:
  contents: write

jobs:
  update-crypto-data:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Initialize package.json and set ESM
      run: |
        npm init -y
        npm pkg set type=module
        
    - name: Fetch crypto data
      run: |
        cat > fetch-crypto.js << 'EOF'
        import fs from 'fs';
        
        async function fetchCryptoData() {
          try {
            console.log('Fetching crypto data...');
            
            // CoinGecko API 호출 (USDT 추가)
            console.log('Fetching global prices...');
            const globalResponse = await fetch(
              'https://api.coingecko.com/api/v3/simple/price?ids=bitcoin,ethereum,ripple,cardano,solana,tether&vs_currencies=usd&include_24hr_change=true'
            );
            
            if (!globalResponse.ok) {
              throw new Error(`CoinGecko API failed: ${globalResponse.status}`);
            }
            const globalData = await globalResponse.json();
            console.log('Global data received');
            
            // Upbit API 호출 (USDT 추가)
            console.log('Fetching Upbit prices...');
            const upbitResponse = await fetch(
              'https://api.upbit.com/v1/ticker?markets=KRW-BTC,KRW-ETH,KRW-XRP,KRW-ADA,KRW-SOL,KRW-USDT'
            );
            
            if (!upbitResponse.ok) {
              throw new Error(`Upbit API failed: ${upbitResponse.status}`);
            }
            const upbitData = await upbitResponse.json();
            console.log('Upbit data received');
            
            // 환율 API 호출 (캐싱 적용)
            const exchangeRate = await getExchangeRateWithCache();
            console.log(`Exchange rate: 1 USD = ${exchangeRate} KRW`);
            
            // 데이터 처리 (USDT 추가)
            const coinMapping = {
              'bitcoin': { upbit: 'KRW-BTC', name: 'Bitcoin', symbol: 'BTC' },
              'ethereum': { upbit: 'KRW-ETH', name: 'Ethereum', symbol: 'ETH' },
              'ripple': { upbit: 'KRW-XRP', name: 'XRP', symbol: 'XRP' },
              'cardano': { upbit: 'KRW-ADA', name: 'Cardano', symbol: 'ADA' },
              'solana': { upbit: 'KRW-SOL', name: 'Solana', symbol: 'SOL' },
              'tether': { upbit: 'KRW-USDT', name: 'Tether', symbol: 'USDT' }
            };
            
            const coins = Object.entries(coinMapping).map(([coinId, info]) => {
              const globalPrice = globalData[coinId];
              const upbitPrice = upbitData.find(item => item.market === info.upbit);
              
              if (!globalPrice || !upbitPrice) {
                console.warn(`Missing data for ${coinId}`);
                return null;
              }
              
              const globalPriceUSD = globalPrice.usd;
              const globalPriceKRW = globalPriceUSD * exchangeRate;
              const upbitPriceKRW = upbitPrice.trade_price;
              const kimchiPremium = ((upbitPriceKRW - globalPriceKRW) / globalPriceKRW) * 100;
              
              console.log(`${info.name}: Global=${globalPriceUSD.toFixed(6)}USD (${globalPriceKRW.toFixed(0)}KRW), Upbit=${upbitPriceKRW.toFixed(0)}KRW, Premium=${kimchiPremium.toFixed(2)}%`);
              
              return {
                coin: `${info.name} (${info.symbol})`,
                global_price_usd: globalPriceUSD,
                global_price_krw: globalPriceKRW,
                upbit_price: upbitPriceKRW,
                kimchi_premium: kimchiPremium,
                change_24h: globalPrice.usd_24h_change,
                raw: {
                  global: globalPrice,
                  upbit: upbitPrice,
                  exchange_rate: exchangeRate
                }
              };
            }).filter(Boolean);
            
            // JSON 파일로 저장
            const result = {
              updated_at: new Date().toISOString(),
              exchange_rate: {
                usd_to_krw: exchangeRate,
                source: 'ExchangeRate-API.com',
                last_updated: new Date().toISOString()
              },
              coins: coins
            };
            
            // data 폴더 생성
            if (!fs.existsSync('data')) {
              fs.mkdirSync('data');
            }
            
            fs.writeFileSync('data/crypto.json', JSON.stringify(result, null, 2));
            console.log(`Crypto data updated successfully! ${coins.length} coins processed.`);
            
          } catch (error) {
            console.error('Error fetching crypto data:', error);
            process.exit(1);
          }
        }
        
        // 환율 캐싱 함수
        async function getExchangeRateWithCache() {
          const cacheFile = 'data/exchange_rate_cache.json';
          const oneHour = 60 * 60 * 1000; // 1시간 (밀리초)
          
          try {
            // 캐시 파일 확인
            if (fs.existsSync(cacheFile)) {
              const cache = JSON.parse(fs.readFileSync(cacheFile, 'utf8'));
              const cacheAge = Date.now() - new Date(cache.timestamp).getTime();
              
              // 1시간 이내면 캐시된 환율 사용
              if (cacheAge < oneHour) {
                console.log(`Using cached exchange rate (${Math.floor(cacheAge / 60000)} minutes old): ${cache.rate} KRW`);
                return cache.rate;
              }
              
              console.log(`Cache expired (${Math.floor(cacheAge / 60000)} minutes old), fetching new rate...`);
            } else {
              console.log('No cache found, fetching exchange rate...');
            }
            
            // 새로운 환율 가져오기
            const response = await fetch('https://api.exchangerate-api.com/v4/latest/USD');
            if (!response.ok) {
              throw new Error(`Exchange rate API failed: ${response.status}`);
            }
            
            const data = await response.json();
            const rate = data.rates.KRW;
            
            // 캐시에 저장
            const cacheData = {
              rate: rate,
              timestamp: new Date().toISOString()
            };
            
            fs.writeFileSync(cacheFile, JSON.stringify(cacheData, null, 2));
            console.log(`New exchange rate fetched and cached: ${rate} KRW`);
            
            return rate;
            
          } catch (error) {
            console.warn('Failed to fetch exchange rate:', error.message);
            
            // API 실패 시 캐시된 환율 사용 (시간 제한 무시)
            if (fs.existsSync(cacheFile)) {
              const cache = JSON.parse(fs.readFileSync(cacheFile, 'utf8'));
              console.log(`Using fallback cached rate: ${cache.rate} KRW`);
              return cache.rate;
            }
            
            // 캐시도 없으면 기본값 사용
            console.log('Using default exchange rate: 1350 KRW');
            return 1350; // 대략적인 기본 환율
          }
        }
        
        fetchCryptoData();
        EOF
        
        node fetch-crypto.js
        
    - name: Commit and push if changed
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add data/crypto.json data/exchange_rate_cache.json
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Update crypto data - $(date)"
          git push
        fi